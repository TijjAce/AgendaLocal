#!/usr/bin/env python
"""
Script d'administration pour r√©soudre les probl√®mes de production
Usage: python scripts/management/production_admin.py [command]
"""

import os
import sys
import django

# Configuration Django
sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(__file__))))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')
django.setup()

from django.contrib.auth.models import User
# from axes.models import AccessAttempt  # Supprim√© pour d√©veloppement local
# from axes.helpers import reset_attempts  # Supprim√© pour d√©veloppement local
from django.core.management import call_command


def unlock_all_users():
    """Fonction d√©sactiv√©e - django-axes supprim√© pour d√©veloppement local"""
    print("üîì Fonction d√©sactiv√©e - pas de verrouillage en mode local")
    
    # # Supprimer toutes les tentatives d'acc√®s
    # attempts_count = AccessAttempt.objects.count()
    # AccessAttempt.objects.all().delete()
    
    print("‚úÖ Aucune action n√©cessaire en mode d√©veloppement local")
    print("‚úÖ Tous les utilisateurs sont maintenant d√©bloqu√©s")


def unlock_user(username):
    """D√©bloquer un utilisateur sp√©cifique"""
    print(f"üîì D√©blocage de l'utilisateur: {username}")
    
    try:
        user = User.objects.get(username=username)
        reset_attempts(username=username)
        print(f"‚úÖ Utilisateur {username} d√©bloqu√© avec succ√®s")
    except User.DoesNotExist:
        print(f"‚ùå Utilisateur {username} introuvable")


def show_locked_users():
    """Afficher les utilisateurs actuellement verrouill√©s"""
    print("üîç Utilisateurs verrouill√©s:")
    
    attempts = AccessAttempt.objects.all()
    if not attempts:
        print("‚úÖ Aucun utilisateur verrouill√©")
        return
    
    for attempt in attempts:
        print(f"- Utilisateur: {attempt.username}")
        print(f"  IP: {attempt.ip_address}")
        print(f"  Tentatives: {attempt.failures_since_start}")
        print(f"  Derni√®re tentative: {attempt.attempt_time}")
        print()


def check_production_status():
    """V√©rifier le statut de la production"""
    print("üîç V√©rification du statut de production...")
    
    # V√©rifier les variables d'environnement
    print("\nüìã Variables d'environnement:")
    env_vars = [
        'DJANGO_SECRET_KEY',
        'RESEND_API_KEY', 
        'DATABASE_URL',
        'RAILWAY_ENVIRONMENT',
        'DJANGO_DEBUG'
    ]
    
    for var in env_vars:
        value = os.environ.get(var)
        if value:
            if 'KEY' in var or 'SECRET' in var:
                print(f"‚úÖ {var}: ****** (d√©fini)")
            else:
                print(f"‚úÖ {var}: {value}")
        else:
            print(f"‚ùå {var}: Non d√©fini")
    
    # V√©rifier la base de donn√©es
    print("\nüóÑÔ∏è Base de donn√©es:")
    try:
        user_count = User.objects.count()
        print(f"‚úÖ Connexion DB OK - {user_count} utilisateurs")
    except Exception as e:
        print(f"‚ùå Erreur DB: {e}")
    
    # V√©rifier django-axes
    print("\nüõ°Ô∏è Django-axes:")
    try:
        attempts_count = AccessAttempt.objects.count()
        print(f"‚úÖ Axes OK - {attempts_count} tentatives enregistr√©es")
    except Exception as e:
        print(f"‚ùå Erreur Axes: {e}")


def main():
    """Fonction principale"""
    if len(sys.argv) < 2:
        print("Usage: python production_admin.py [command]")
        print("\nCommandes disponibles:")
        print("  unlock-all     - D√©bloquer tous les utilisateurs")
        print("  unlock <user>  - D√©bloquer un utilisateur sp√©cifique")
        print("  show-locked    - Afficher les utilisateurs verrouill√©s")
        print("  status         - V√©rifier le statut de production")
        return
    
    command = sys.argv[1]
    
    if command == "unlock-all":
        unlock_all_users()
    elif command == "unlock" and len(sys.argv) > 2:
        unlock_user(sys.argv[2])
    elif command == "show-locked":
        show_locked_users()
    elif command == "status":
        check_production_status()
    else:
        print(f"‚ùå Commande inconnue: {command}")


if __name__ == "__main__":
    main()
